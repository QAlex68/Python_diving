# –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

a = 42
b = 73
a, b = b, a
print(f'{a = }\t{b = }')

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
# a, b, c = input("–¢—Ä–∏ —Å–∏–º–≤–æ–ª–∞: ")
# print(f'{a=} {b=} {c=}')

# –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä—ë—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
a, b, c = ("–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏",)
print(f'{a=} {b=} {c=}')

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å (–ø—Ä–∏–º–µ—Ä —Å –æ—à–∏–±–∫–æ–π)
# a, b, c = {"–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å"}
# print(f'{a=} {b=} {c=}') # ValueError: too many values to unpack (expected 3)

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É–ø–∞–∫–æ–≤–∫–æ–π ‚Äú–ª–∏—à–Ω–µ–≥–æ‚Äù, —É–ø–∞–∫–æ–≤–∫–∞ —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π (–∑–≤–µ–∑–¥–æ—á–∫–æ–π –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)

data = ["–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å",
        ]
a, b, c, *d = data
print(f'{a=} {b=} {c=} {d=}')
a, b, *c, d = data
print(f'{a=} {b=} {c=} {d=}')
a, *b, c, d = data
print(f'{a=} {b=} {c=} {d=}')
*a, b, c, d = data
print(f'{a=} {b=} {c=} {d=}')

# –ï—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–∞ —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∞ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö
# —Ä–∞—Å—á—ë—Ç–∞—Ö –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.

link = ('https://docs.python.org/3/faq/programming.html#how-can-i-pass-op '
        'tional-or-keyword-parameters-from-one-function-to-another')
prefix, *_, suffix = link.split('/')

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π

data = [2, 4, 6, 8, 10, ]
for item in data:
    print(item, end='\t')
print()
# –ò –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–æ–π:
data = [2, 4, 6, 8, 10, ]
print(*data, sep='\t')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ

a = b = c = 0 # good
a += 42
print(f'{a=} {b=} {c=}')

a = b = c = {1, 2, 3} # bad
a.add(42)
print(f'{a=} {b=} {c=}')

a, b, c = 1, 2, 3
print(f'{a=} {b=} {c=}')

# –ê –µ—Å–ª–∏ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞—Ç—å –ª–∏—à—å –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –ø–æ–ª—É—á–∏–º –∫–æ—Ä—Ç–µ–∂.
t = 1, 2, 3
print(f'{t=}, {type(t)}')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
a = b = c = 42
# if a == b and b == c:
if a == b == c:
    print('–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ')

# if a < b < c:
#     print('b –±–æ–ª—å—à–µ a –∏ –º–µ–Ω—å—à–µ c')

# –ü–ª–æ—Ö–∏–µ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫–∏

a = 12; b = 42; c = 73
if a < b < c: b = None; print('–£–∂–∞—Å–Ω—ã–π –∫–æ–¥')

# –û—á–µ–Ω—å –≤–∞–∂–Ω–æ! –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –∏
# –∑–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ –æ–¥–Ω—É —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π ‚Äî –ø–ª–æ—Ö–æ–π —Å—Ç–∏–ª—å
# –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å ‚Äú–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ‚Äù –∑–∞
# –ø–æ–¥–æ–±–Ω—ã–µ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ –≤—Ä–µ–º—è —É—á—ë–±—ã –∏ –æ—Ç–∫–∞–∑ –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤–æ –≤—Ä–µ–º—è
# —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
# –ó–∞–¥–∞–Ω–∏–µ
data = {10, 9, 8, 1, 6, 3}
a, b, c, *d, e = data
print(a, b, c, d, e)

# 2. –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã
# –§—É–Ω–∫—Ü–∏—è iter
# a = 42
# iter(a) # TypeError: 'int' object is not iterable

# a = 42
# iter(a) # TypeError: 'int' object is not iterable

# –ù–∞–ø—Ä—è–º—É—é –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. Python —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è list_iter —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ <list_iterator object at 0x0000025383D29400>, —Ç.–µ.
# –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞. –î–ª—è –∫–æ—Ä—Ç–µ–∂–∞ —Ñ—É–Ω–∫—Ü–∏—è iter –≤–µ—Ä–Ω—ë—Ç tuple_iterator, –¥–ª—è
# –º–Ω–æ–∂–µ—Å—Ç–≤ set_iterator, –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è dict.items() –≤–µ—Ä–Ω—ë—Ç—Å—è dict_itemiterator.
# –û–¥–∏–Ω –∏–∑ –ø—Ä–æ—Å—Ç–µ–π—à–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã - —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä —á–µ—Ä–µ–∑
# –∑–≤—ë–∑–¥–æ—á–∫—É.

data = [2, 4, 6, 8]
list_iter = iter(data)
print(*list_iter)
print(*list_iter)

# –í–Ω–∏–º–∞–Ω–∏–µ! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º
# –æ–±—ä–µ–∫—Ç–æ–º. –ü–æ–ª—É—á–∏–≤ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –æ–Ω –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
# –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä.


# –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏ iter ‚Äî sentinel –ø–µ—Ä–µ–¥–∞—é—Ç –¥–ª—è –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö
# –æ–±—ä–µ–∫—Ç–æ–≤-–∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
# –∏—Ç–µ—Ä–∞—Ü–∏—è, –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º sentinel.

# data = [2, 4, 6, 8]
# list_iter = iter(data, 6) # TypeError: iter(v, w): v must be callable

# –°–ø–∏—Å–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π, –µ–≥–æ –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å. –ü–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É TypeError.
# –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ iter —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ‚Äî —á—Ç–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ
# —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∞–º–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü
# —Ñ–∞–π–ª–∞.
# import functools
#
# f = open('mydata.bin', 'rb')
# for block in iter(functools.partial(f.read, 16), b''):
#     print(block)
# f.close()
# –§–∞–π–ª–∞ –Ω–µ—Ç

#  –§—É–Ω–∫—Ü–∏—è next
# –§—É–Ω–∫—Ü–∏—è next –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç next(iterator[, default]). –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
# –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è iter. –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –æ—á–µ—Ä–µ–¥–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞.
data = [2, 4, 6, 8]
list_iter = iter(data)
print(next(list_iter))
print(next(list_iter))
print(next(list_iter))
print(next(list_iter))
# print(next(list_iter)) # StopIteration
# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ StopIteration. –î–∞–Ω–Ω–æ–µ
# –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–ª—É–∂–∏—Ç —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–∏–∫–ª—É for in –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞
# –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ü–∏–∫–ª–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –ù–æ —Ü–∏–∫–ª
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
# –±–ª–æ–∫—É –∫–æ–¥–∞. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.
# –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏ next –Ω—É–∂–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ
# –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è StopIteration
data = [2, 4, 6, 8]
list_iter1 = iter(data)
print(next(list_iter1, 42))
print(next(list_iter1, 42))
print(next(list_iter1, 42))
print(next(list_iter1, 42))
print(next(list_iter1, 42))
print(next(list_iter1, 42))
# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥. –õ—é–±–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ Python –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# –∏—Ç–µ—Ä–∞—Ü–∏–∏, —Ç.–µ. –ø–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ü–∏–∫–ª–µ for in. –î–ª—è —ç—Ç–æ–≥–æ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä,
# –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π, next —ç–ª–µ–º–µ–Ω—Ç. –û—Ç–¥–µ–ª—å–Ω–æ
# —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–µ–π –ø–æ–∑–≤–æ–ª—è—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ iter –∏ next. –ö—Ä–æ–º–µ —Ç–æ–≥–æ –ø—Ä–∏ –û–û–ü –º–æ–∂–Ω–æ
# —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∫–ª–∞—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –≤ —Ä–∞–º–∫–∞—Ö
# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ª–µ–∫—Ü–∏–∏.

# –ó–∞–¥–∞–Ω–∏–µ
# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–∞–∂–¥–∞—è –∏–∑ —Å—Ç—Ä–æ–∫, –Ω–µ
# –∑–∞–ø—É—Å–∫–∞—è –∫–æ–¥. –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã.
data = {"–æ–¥–∏–Ω": 1, "–¥–≤–∞": 2, "—Ç—Ä–∏": 3}
x = iter(data.items())
print(x)
y = next(x)
print(y)
z = next(iter(y))
print(z)


# 3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫–∞–º –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ Python.
# üî• –í–∞–∂–Ω–æ! –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫–æ–º.

a = range(0, 10, 2)
print(f'{a=}, {type(a)=}, {a.__sizeof__()=}, {len(a)}')
b = range(-1_000_000, 1_000_000, 2)
print(f'{b=}, {type(b)=}, {b.__sizeof__()=}, {len(b)}')
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä a –Ω–∞ –ø—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä b –Ω–∞ 1 –º–ª–Ω. –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–Ω–∏–º–∞—é—Ç
# –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è Python –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä,
# –ø–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è.
my_gen = (chr(i) for i in range(97, 123))
print(my_gen) # <generator object <genexpr> at 0x000001ED58DD7D60>
for char in my_gen:
    print(char)
# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏, –≤–Ω—É—Ç—Ä–∏
# –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä
# —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 97 –¥–æ 122 –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ASCII —Å
# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–¥–∞–º–∏.

x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
mult = (i + j for i in x if i % 2 != 0 for j in y if j != 1)
res = list(mult)
print(f'{len(res)=}\n{res}')

# List comprehensions
# –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–µ –≤ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –∞ –≤
# –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö? –ü–æ–ª—É—á–∏–º list comprehensions. –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: list comp, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# —Å–ø–∏—Å–∫–æ–≤, —Å–ø–∏—Å–∫–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ. –ò –Ω–µ—Ç, —ç—Ç–æ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–æ –µ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
# –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞–∫–∞ —Ä–∞–≤–Ω–æ.

my_listcomp = [chr(i) for i in range(97, 123)]
print(my_listcomp) # ['a', 'b', 'c', 'd', ..., z]
for char in my_listcomp:
    print(char)

# –î–ª–∏–Ω–Ω—ã–π –∫–æ–¥:
data = [2, 5, 1, 42, 65, 76, 24, 77]
res = []
for item in data:
    if item % 2 == 0:
        res.append(item)
print(f'{res = }')
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ listcomp:
data = [2, 5, 1, 42, 65, 76, 24, 77]
res = [item for item in data if item % 2 == 0]
print(f'{res = }')

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
# —Å–ø–∏—Å–∫–∞
# –í –ø—Ä–∏–º–µ—Ä–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ‚Äú–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è‚Äù –º—ã –æ–±–µ—Ä–Ω—É–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# —Ñ—É–Ω–∫—Ü–∏–µ–π list, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫. –ú–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–æ –∫–∞–∫
# –∞–Ω—Ç–∏–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞. –ö–∞–∫–æ–π –∂–µ –ø—Ä–∏–º–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º? –ï—Å–ª–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ –Ω—É–∂–µ–Ω
# –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
res = [i + j for i in x if i % 2 != 0 for j in y if j != 1]
print(f'{len(res)=}\n{res}')
print()
# –ê –µ—Å–ª–∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä –º—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ö–æ—Ç–∏–º
# –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ü–∏–∫–ª–µ. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–¥–æ–π–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ
# –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫.
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
mult = (i + j for i in x if i % 2 != 0 for j in y if j != 1)
for item in mult:
    print(f'{item = }')
# üî• –í–∞–∂–Ω–æ! –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ —Ä–µ—à–∏—Ç–µ –Ω—É–∂–Ω–∞ –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
# –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–µ—Ç. –ù–µ —Å—Ç–æ–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö
# —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –≤—ã –∏–º–∏ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

# Set comprehensions
# –ö—Ä–æ–º–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–∞
# –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –ø—Ä–∏–º–µ—Ä–∞–º –≤—ã—à–µ. –ò–∑–º–µ–Ω—è—é—Ç—Å—è –ª–∏—à—å —Å–∫–æ–±–∫–∏.
# –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–≥—É—Ä–Ω—ã–µ.
my_setcomp = {chr(i) for i in range(97, 123)}
print(my_setcomp) # {'f', 'g', 'b', 'j', 'e',... }
for char in my_setcomp:
    print(char)
# –ú—ã —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ü–∏–∫–ª–µ. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
# —Ü–∏–∫–ª—ã. –¢–∞–∫–∂–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤
# –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
# –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
# ‚óè –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ—Ä—è–¥–∫–æ–º
# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# ‚óè –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
res = {i + j for i in x if i % 2 != 0 for j in y if j != 1}
print(f'{len(res)=}\n{res}')
# –ö–∞–∫ –∏ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –≤—ã—à–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–±—Ä–∞–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ
# –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä x –∏ y —Å–ø–∏—Å–∫–æ–≤. –ù–æ –≤ –∏—Ç–æ–≥–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∞ 19
# —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö. 6 –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –Ω–æ –≤—Ä–µ–º—è
# –Ω–∞ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É –±—ã–ª–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ. –ê—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∞ –Ω–µ —É–ª—É—á—à–∏–ª–∞—Å—å.
# Dict comprehensions
# –ï—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è.
my_dictcomp = {i: chr(i) for i in range(97, 123)}
print(my_dictcomp) # {97: 'a', 98: 'b', 99: 'c',... }
for number, char in my_dictcomp.items():
    print(f'dict[{number}] = {char}')
# –ó–∞–ø–∏—Å—å –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
# —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ: key: value. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏
# Python –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å.
# üî• –í–∞–∂–Ω–æ! –°—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏
# –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ç–∏–ø–∞.

# –í–æ –≤—Å—ë–º –æ—Å—Ç–∞–ª—å–Ω–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä–µ–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞,
# —á—Ç–æ –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
# –ó–∞–¥–∞–Ω–∏–µ
# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –≤—ã–≤–µ–¥–µ—Ç print,
# –Ω–µ –∑–∞–ø—É—Å–∫–∞—è –∫–æ–¥. –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã.
data = {2, 4, 4, 6, 8, 10, 12}
res1 = {None: item for item in data if item > 4}
res2 = (item for item in data if item > 4)
res3 = [[item] for item in data if item > 4]
print(res1, res2, res3)

# 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
# –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–º –Ω–∞–¥–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–µ–ª –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ n.
# –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç
# —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
def factorial(n):
    number = 1
    result = []
    for i in range(1, n + 1):
        number *= i
        result.append(number)
    return result

for i, num in enumerate(factorial(10), start=1):
    print(f'{i}! = {num}')
# –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏
# —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫. –î–∞–ª–µ–µ –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ n
# –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ß–∏—Å–ª–æ number —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–µ —á–∏—Å–ª–æ, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è
# —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫. –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
# —Ü–∏–∫–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.
# –ü–æ–ª—É—á–∏–≤ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ –≤—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
# –ö–æ–¥ –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–æ. –ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—ã —Å—Ä–∞–∑—É, –∞
# –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ –ø–µ—á–∞—Ç—å. –ï—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π listcomp,
# –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–º–µ–Ω—è—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –∫—Ä—É–≥–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç—å
# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# –ö–æ–º–∞–Ω–¥–∞ yield
# –ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–∞ return –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏
# –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ—ë —Ä–∞–±–æ—Ç—É. –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ yield –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤
# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ yield –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏. –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è
# –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–æ–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏—è
# –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–æ–º–µ–Ω—Ç–∞
# –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
# –ò–∑–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–µ–ª, –ø—Ä–µ–≤—Ä–∞—Ç–∏–≤ –µ—ë –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
def factorial(n):
    number = 1
    for i in range(1, n + 1):
        number *= i
        yield number
for i, num in enumerate(factorial(10), start=1):
    print(f'{i}! = {num}')
# –¢–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í —Ü–∏–∫–ª–µ
# –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞. –î–∞–ª–µ–µ –∫–æ–º–∞–Ω–¥–∞ yield –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –∑–Ω–∞—á–µ–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ –≤–µ—Ä–Ω—ë—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ —Ü–∏–∫–ª—É for –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
# –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞.
# –ö–∞–∫ –≤—ã –ø–æ–º–Ω–∏—Ç–µ, –µ—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ return Python –≤ –∫–æ–Ω—Ü–µ —Ç–µ–ª–∞
# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç return None. –Ø–≤–Ω–∞—è –∏–ª–∏ –Ω–µ—è–≤–Ω–∞—è, –∫–∞–∫ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ, –∫–æ–º–∞–Ω–¥–∞
# return –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∑–æ–≤–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è StopIteration.

# –§—É–Ω–∫—Ü–∏–∏ iter –∏ next –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
# –£–∂–µ –∑–Ω–∞–∫–æ–º—ã–µ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É —É—Ä–æ–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ iter –∏ next –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å
# —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:
my_iter = iter(factorial(4))
print(my_iter)
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
# print(next(my_iter)) # StopIteration
# –ó–∞–¥–∞–Ω–∏–µ
# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –≤—ã–≤–µ–¥–µ—Ç print,
# –Ω–µ –∑–∞–ø—É—Å–∫–∞—è –∫–æ–¥. –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã.
def gen(a: int, b: int) -> str:
    if a > b:
        a, b = b, a
    for i in range(a, b + 1):
        yield str(i)
for item in gen(10, 1):
    print(f'{item = }')








